buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jruby-gradle:jruby-gradle-plugin:[1.1.4,2.0)'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}
apply plugin: "com.github.jruby-gradle.base"
import com.github.jrubygradle.JRubyExec

group = 'org.orekyuu'
version = '0.0.1'
sourceCompatibility = '14'

tasks.withType(JavaCompile) {
    options.compilerArgs += ['--enable-preview']
}

compileJava {
    options.compilerArgs += ['-Adoma.domain.converters=org.orekyuu.nozomi.infrastructure.doma.converter.DomainConvertersProvider']
}

test {
    jvmArgs = ['--enable-preview']
    useJUnitPlatform()
    testLogging {
        exceptionFormat 'full'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.4.0'
    implementation "org.seasar.doma:doma-core:2.37.0"
    annotationProcessor "org.seasar.doma:doma-processor:2.37.0"
    runtimeOnly 'mysql:mysql-connector-java'

    implementation 'com.github.docker-java:docker-java-core:3.2.3'
    implementation 'com.github.docker-java:docker-java-transport-httpclient5:+'

    implementation 'io.reactivex.rxjava3:rxjava:3.0.4'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.assertj:assertj-db:1.3.0'

    jrubyExec 'rubygems:activerecord:6.0.3.1'
    jrubyExec 'rubygems:rake:13.0.1'
    jrubyExec 'rubygems:activerecord-jdbcmysql-adapter:60.2'
}


task rake( type : JRubyExec ) {
    def param = findProperty('param')
    if(param == null) {
        return
    }
    jrubyArgs '-S'
    script 'rake'
    scriptArgs 'Rakefile', param
}